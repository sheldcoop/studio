\'use client\';\n\nimport { useState, useEffect, Suspense } from \'react\';\nimport { useSearchParams, useRouter } from \'next/navigation\';\nimport { getAuth, verifyPasswordResetCode, confirmPasswordReset, type AuthError } from \'firebase/auth\';\nimport { app } from \'@/lib/firebase\';\nimport { Button } from \'@/components/ui/button\';\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardFooter,\n} from \'@/components/ui/card\';\nimport { Input } from \'@/components/ui/input\';\nimport { Label } from \'@/components/ui/label\';\nimport { Logo } from \'@/components/app/logo\';\nimport { Alert, AlertDescription, AlertTitle } from \'@/components/ui/alert\';\nimport { AlertTriangle, CheckCircle, Loader2 } from \'lucide-react\';\n\nconst auth = getAuth(app);\n\nconst getFriendlyErrorMessage = (error: AuthError): string => {\n    console.error(\"Password Reset Error:\", error);\n    switch (error.code) {\n        case \'auth/expired-action-code\':\n            return \'This password reset link has expired. Please request a new one from the login page.\';\n        case \'auth/invalid-action-code\':\n            return \'This password reset link is invalid or has already been used. Please request a new one.\';\n        case \'auth/user-disabled\':\n            return \'Your account has been disabled. Please contact support.\';\n        case \'auth/user-not-found\':\n            return \'There is no user corresponding to this password reset link. The account may have been deleted.\';\n        case \'auth/weak-password\':\n            return \'The new password is too weak. It must be at least 6 characters long.\';\n        default:\n            return `An unexpected error occurred (Code: ${error.code}). Please try again.\`;\n    }\n}\n\nfunction ResetPasswordComponent() {\n  const router = useRouter();\n  const searchParams = useSearchParams();\n  const [oobCode, setOobCode] = useState<string | null>(null);\n  const [newPassword, setNewPassword] = useState(\'\');\n  const [confirmPassword, setConfirmPassword] = useState(\'\');\n  const [error, setError] = useState<string | null>(null);\n  const [successMessage, setSuccessMessage] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isResetting, setIsResetting] = useState(false);\n  const [isCodeVerified, setIsCodeVerified] = useState(false);\n\n  useEffect(() => {\n    const code = searchParams.get(\'oobCode\');\n    if (!code) {\n      setError(\'Invalid URL. The password reset code is missing.\');\n      setIsLoading(false);\n      return;\n    }\n\n    setOobCode(code);\n\n    verifyPasswordResetCode(auth, code)\n      .then(() => {\n        setIsCodeVerified(true);\n        setIsLoading(false);\n      })\n      .catch((err) => {\n        setError(getFriendlyErrorMessage(err as AuthError));\n        setIsLoading(false);\n      });\n  }, [searchParams]);\n\n  const handleResetPassword = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(null);\n    setSuccessMessage(null);\n\n    if (newPassword !== confirmPassword) {\n      setError(\'The passwords do not match. Please re-enter them.\');\n      return;\n    }\n    if (newPassword.length < 6) {\n        setError(\'For security, your password must be at least 6 characters long.\');\n        return;\n    }\n    if (!oobCode) {\n        setError(\'An unexpected error occurred. No reset code was found in the URL.\');\n        return;\n    }\n\n    setIsResetting(true);\n    try {\n      await confirmPasswordReset(auth, oobCode, newPassword);\n      setSuccessMessage(\'Your password has been successfully reset. You will be redirected to the login page shortly.\');\n      setTimeout(() => router.push(\'/login\'), 4000);\n    } catch (err) {\n      setError(getFriendlyErrorMessage(err as AuthError));\n    } finally {\n        setIsResetting(false);\n    }\n  };\n\n  const renderContent = () => {\n    if (isLoading) {\n        return (\n            <div className=\"flex justify-center items-center p-8\">\n               <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n            </div>\n        );\n    }\n\n    if (error) {\n        return (\n             <Alert variant=\"destructive\" className=\"mb-4\">\n               <AlertTriangle className=\"h-4 w-4\" />\n               <AlertTitle>Error</AlertTitle>\n               <AlertDescription>{error}</AlertDescription>\n             </Alert>\n        );\n    }\n    \n    if (successMessage) {\n        return (\n            <Alert variant=\"default\" className=\"mb-4 border-green-500/50 text-green-700 dark:text-green-400 [&>svg]:text-green-700 dark:[&>svg]:text-green-400\">\n               <CheckCircle className=\"h-4 w-4\" />\n               <AlertTitle>Success!</AlertTitle>\n               <AlertDescription>{successMessage}</AlertDescription>\n            </Alert>\n        );\n    }\n\n    if (isCodeVerified) {\n        return (\n            <form onSubmit={handleResetPassword} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                <Label htmlFor=\"new-password\">New Password</Label>\n                <Input\n                    id=\"new-password\"\n                    type=\"password\"\n                    value={newPassword}\n                    onChange={(e) => setNewPassword(e.target.value)}\n                    required\n                />\n                </div>\n                <div className=\"space-y-2\">\n                <Label htmlFor=\"confirm-password\">Confirm New Password</Label>\n                <Input\n                    id=\"confirm-password\"\n                    type=\"password\"\n                    value={confirmPassword}\n                    onChange={(e) => setConfirmPassword(e.target.value)}\n                    required\n                />\n                </div>\n                <Button type=\"submit\" className=\"w-full\" disabled={isResetting}>\n                {isResetting && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                Reset Password\n                </Button>\n            </form>\n        );\n    }\n\n    return null; // Should not be reached if logic is correct\n  }\n\n  return (\n    <div className=\"flex min-h-screen items-center justify-center bg-background p-4\">\n      <div className=\"w-full max-w-md\">\n        <div className=\"mb-6 flex justify-center\">\n          <Logo />\n        </div>\n        <Card>\n          <CardHeader className=\"text-center\">\n            <CardTitle className=\"font-headline\">Reset Your Password</CardTitle>\n          </CardHeader>\n          <CardContent>\n             {renderContent()}\n          </CardContent>\n          <CardFooter>\n              <Button variant=\"link\" className=\"w-full\" onClick={() => router.push(\'/login\')}>\n                  Back to Login\n              </Button>\n          </CardFooter>\n        </Card>\n      </div>\n    </div>\n  );\n}\n\nexport default function ResetPasswordPage() {\n  return (\n    <Suspense fallback={<div className=\"flex h-screen w-full items-center justify-center\"><Loader2 className=\"h-8 w-8 animate-spin text-primary\"/></div>}>\n      <ResetPasswordComponent />\n    </Suspense>\n  )\n}\n